/**
 * Grammar rules for a four function calculator.  The first step is defining the
 * terminals of the grammar.  These terminals represent the smallest unit of the
 * language, such as a number or an operator, and are defined with the regular
 * expression syntax.  As an example, the following line defines a number whos
 * string consists of one or more digits.
 *
 *      'num' [0-9]+;
 *
 * Grammar rules then define the valid combinations of these terminals in the
 * user input.  These rules are written as a nonterminal followed by zero or
 * more symbols and ending with a semicolon.  If there is more than one rule
 * associated the same nonterminal, they are separated by a vertical bar.  The
 * following statement defines a multiplication to be either a number, or a
 * previous product times a number.
 *
 *      mult: 'num' | mult '*' 'num';
 *
 * Using the previous techniques for defining grammar rules, and implementing
 * their associated functions, the following lists the full grammar of our
 * calculator.  The parser generator reads this grammar and outputs the source
 * code of action tables.  These action tables define which functions to call
 * while the calculator is reading the input expressions.  These action tables
 * are then compiled along with the user defined functions to build a calculator
 * program.
 */

#include "xml.hpp"

/* names */
'name'<Name>  ([A-Z]|[a-z])+    &scan_name;

/* rules */
document<Document>: elements    &reduce_document
    ;

elements<Elements>: element     &reduce_elements
    | elements element          &append_elements
    ;
    
element<Element>: stag contents etag  &reduce_element
    | stag etag        &reduce_empty
    ;
    
contents<Contents>: content   &reduce_contents
    | contents content        &append_contents
    ;
content<Content>: 'name'  &content_name
    | element             &content_element
    | element 'name'      &content_element_name
    ;
    
attrs<Attrs>: attr      &reduce_attrs
    | attrs attr        &append_attrs
    ;
    
attr<Attr>: 'name' '=' '\"' 'name' '\"'  &reduce_attr
    ;
    
stag<Tag>: '<' 'name' '>'       &reduce_stag
    | '<' 'name' attrs '>'       &reduce_stag_attrs
    ;
etag<Tag>: '</' 'name' '>'      &reduce_etag
    ;
