/**
 * This example uses a parser generator to build a calculator.  The first
 * step is defining the terminals of the grammar.  These terminals represent the
 * smallest unit of the language, such as a number or an operator, and are
 * defined with the regular expression syntax.  As an example, the following
 * line defines a number whos string consists of one or more digits.
 *
 *      'num' [0-9]+;
 *
 * Grammar rules then define the valid combinations of these terminals in the
 * user input.  These rules are written as a nonterminal followed by zero or
 * more symbols and ending with a semicolon.  If there is more than one rule
 * associated the same nonterminal, they are separated by a vertical bar.  The
 * following statement defines a multiplication to be either a number, or a
 * previous product times a number.
 *
 *      mult: 'num' | mult '*' 'num';
 *
 * The following grammar defines a calculator with operators for addition and
 * multiplication.  Operator precedence is set by the multiplication rules
 * containing the terminal for a number.  The first rule is followed by the end
 * of the input string and is last nonterminal left after reading the entire
 * input.
 *
 *      'num'  [0-9]+;
 *
 *      total: add;
 *      add:   mul  | add '+'  mul;
 *      mul:  'num' | mul '*' 'num';
 *
 * Using the previous techniques for defining grammar rules and implementing
 * their associated functions, the following lists the full grammar of our
 * calculator. This text is input to the parser generator for building the
 * tables of actions.
 */

#include "calculator.hpp"

/* Integer Values */
'num'<Expr>  [0-9]+                 &scan_num;
'hex'<Expr>  0x([0-9]|[A-F]|[a-f])+ &scan_hex;
'hex'<Expr>  0h([0-9]|[A-F]|[a-f])+ &scan_hex;

/* Grammar Rules */
total<Expr>: add        &reduce_total
    ;
add<Expr>: mul
    | add '+' mul       &reduce_add_mul
    | add '-' mul       &reduce_sub_mul
    ;
mul<Expr>: int
    | mul '*' int       &reduce_mul_int
    | mul '/' int       &reduce_div_int
    | '(' add ')'       &reduce_paren
    ;
int<Expr>: 'num'
    | 'hex'
    ;

